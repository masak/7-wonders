use v6;

use Zf::Object;
use Zf::Image;
use Zf::Text;
use Zf::Box;
use Zf::Arrow;

class Zf::to::Pixels;

has Zf::Image $!image;

my $CHAR_WIDTH  = 7;
my $CHAR_HEIGHT = 11;

sub read-font($lines) {
    my @buffer;
    my %font;
    for $lines.split(/\n/) {
        next if /^ \s* $/;
        if !@buffer {
            die 'Expected a single character, got ', $_
                unless .chars == 1;
        }
        else {
            die "Expected a line of $CHAR_WIDTH characters, got ", $_
                unless .chars == $CHAR_WIDTH;
            die 'Expected a line of only . and #, got ', $_
                unless /^ <[.#]>+ $/;
        }
        push @buffer, $_;
        if @buffer == $CHAR_HEIGHT + 1 {
            my $char = shift @buffer;
            %font{$char} = [@buffer.list];
            @buffer = ();
        }
    }
    die 'Residue at the end, @buffer contains ', @buffer.perl
        if @buffer;
    return %font;
}

# The font is Proggy Square from <http://www.proggyfonts.com/>
# I find no license on that site, but it says that the font is free.
my %font = read-font q[
A
.......
..###..
.#...#.
.#...#.
.#...#.
.#####.
.#...#.
.#...#.
.#...#.
.......
.......
B
.......
.####..
.#...#.
.#...#.
.####..
.#...#.
.#...#.
.#...#.
.####..
.......
.......
C
.......
..####.
.#.....
.#.....
.#.....
.#.....
.#.....
.#.....
..####.
.......
.......
D
.......
.####..
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
.####..
.......
.......
E
.......
.#####.
.#.....
.#.....
.#####.
.#.....
.#.....
.#.....
.#####.
.......
.......
F
.......
.#####.
.#.....
.#.....
.####..
.#.....
.#.....
.#.....
.#.....
.......
.......
G
.......
..####.
.#.....
.#.....
.#.....
.#..##.
.#...#.
.#...#.
..####.
.......
.......
H
.......
.#...#.
.#...#.
.#...#.
.#####.
.#...#.
.#...#.
.#...#.
.#...#.
.......
.......
I
.......
..###..
...#...
...#...
...#...
...#...
...#...
...#...
..###..
.......
.......
J
.......
..###..
....#..
....#..
....#..
....#..
....#..
....#..
.###...
.......
.......
K
.......
.#....#
.#...#.
.#..#..
.#.#...
.###...
.#..#..
.#...#.
.#....#
.......
.......
L
.......
.#.....
.#.....
.#.....
.#.....
.#.....
.#.....
.#.....
.#####.
.......
.......
M
.......
##...##
##...##
#.#.#.#
#.#.#.#
#..#..#
#..#..#
#.....#
#.....#
.......
.......
N
.......
.#...#.
.##..#.
.##..#.
.#.#.#.
.#.#.#.
.#..##.
.#..##.
.#...#.
.......
.......
O
.......
..###..
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
..###..
.......
.......
P
.......
.####..
.#...#.
.#...#.
.#...#.
.####..
.#.....
.#.....
.#.....
.......
.......
Q
.......
..###..
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
..###..
.....##
.......
R
.......
.####..
.#...#.
.#...#.
.#...#.
.####..
.#...#.
.#...#.
.#...#.
.......
.......
S
.......
..####.
.#.....
.#.....
..###..
.....#.
.....#.
.....#.
.####..
.......
.......
T
.......
.#####.
...#...
...#...
...#...
...#...
...#...
...#...
...#...
.......
.......
U
.......
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
..###..
.......
.......
V
.......
#.....#
#.....#
.#...#.
.#...#.
..#.#..
..#.#..
...#...
...#...
.......
.......
X
.......
.#....#
.#....#
..#..#.
...##..
...##..
..#..#.
.#....#
.#....#
.......
.......
Y
.......
#.....#
#.....#
.#...#.
..#.#..
...#...
...#...
...#...
...#...
.......
.......
Z
.......
.######
......#
.....#.
....#..
...#...
..#....
.#.....
.######
.......
.......
a
.......
.......
.......
..###..
.....#.
..####.
.#...#.
.#...#.
..####.
.......
.......
b
.......
.#.....
.#.....
.####..
.#...#.
.#...#.
.#...#.
.#...#.
.####..
.......
.......
c
.......
.......
.......
..####.
.#.....
.#.....
.#.....
.#.....
..####.
.......
.......
d
.......
.....#.
.....#.
..####.
.#...#.
.#...#.
.#...#.
.#...#.
..####.
.......
.......
e
.......
.......
.......
..###..
.#...#.
.#####.
.#.....
.#.....
..###..
.......
.......
f
.......
...###.
..#....
..#....
.####..
..#....
..#....
..#....
..#....
.......
.......
g
.......
.......
.......
..####.
.#...#.
.#...#.
.#...#.
.#...#.
..####.
.....#.
..###..
h
.......
.#.....
.#.....
.####..
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
.......
.......
i
.......
...#...
.......
..##...
...#...
...#...
...#...
...#...
...#...
.......
.......
j
.......
....#..
.......
...##..
....#..
....#..
....#..
....#..
....#..
....#..
.###...
k
.......
.#.....
.#.....
.#...#.
.#..#..
.#.#...
.###...
.#..#..
.#...#.
.......
.......
l
.......
..##...
...#...
...#...
...#...
...#...
...#...
...#...
...#...
.......
.......
m
.......
.......
.......
###.##.
#..#..#
#..#..#
#..#..#
#..#..#
#..#..#
.......
.......
n
.......
.......
.......
.####..
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
.......
.......
o
.......
.......
.......
..###..
.#...#.
.#...#.
.#...#.
.#...#.
..###..
.......
.......
p
.......
.......
.......
.####..
.#...#.
.#...#.
.#...#.
.#...#.
.####..
.#.....
.#.....
q
.......
.......
.......
..####.
.#...#.
.#...#.
.#...#.
.#...#.
..####.
.....#.
.....#.
r
.......
.......
.......
.#.##..
.##..#.
.#.....
.#.....
.#.....
.#.....
.......
.......
s
.......
.......
.......
..###..
.#.....
.##....
...##..
....#..
.###...
.......
.......
t
.......
..#....
..#....
..####.
..#....
..#....
..#....
..#....
...###.
.......
.......
u
.......
.......
.......
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
..####.
.......
.......
v
.......
.......
.......
.#...#.
.#...#.
..#.#..
..#.#..
...#...
...#...
.......
.......
w
.......
.......
.......
#.....#
#..#..#
#..#..#
#.#.#.#
.##.##.
.#...#.
.......
.......
x
.......
.......
.......
.#...#.
..#.#..
...#...
...#...
..#.#..
.#...#.
.......
.......
y
.......
.......
.......
.#...#.
.#...#.
.#...#.
.#...#.
.#...#.
..####.
.....#.
..###..
z
.......
.......
.......
.#####.
.....#.
....#..
...#...
..#....
.#####.
.......
.......
0
.......
..###..
.#...#.
.#...#.
.#.#.#.
.#.#.#.
.#...#.
.#...#.
..###..
.......
.......
1
.......
...#...
..##...
.#.#...
...#...
...#...
...#...
...#...
.#####.
.......
.......
2
.......
.####..
.....#.
.....#.
....#..
...#...
..#....
.#.....
.#####.
.......
.......
3
.......
.####..
.....#.
.....#.
...##..
.....#.
.....#.
.....#.
.####..
.......
.......
4
.......
.....#.
....##.
...#.#.
..#..#.
.#...#.
.######
.....#.
.....#.
.......
.......
5
.......
.#####.
.#.....
.#.....
.####..
.....#.
.....#.
.#...#.
..###..
.......
.......
6
.......
..###..
.#.....
.#.....
.####..
.#...#.
.#...#.
.#...#.
..###..
.......
.......
7
.......
.#####.
.....#.
....#..
....#..
...#...
...#...
..#....
..#....
.......
.......
8
.......
..###..
.#...#.
.#...#.
..###..
.#...#.
.#...#.
.#...#.
..###..
.......
.......
9
.......
..###..
.#...#.
.#...#.
.#...#.
..####.
.....#.
.....#.
..###..
.......
.......
{
...##..
..#....
..#....
..#....
..#....
.#.....
..#....
..#....
..#....
..#....
...##..
}
.##....
...#...
...#...
...#...
...#...
....#..
...#...
...#...
...#...
...#...
.##....
[
..###..
..#....
..#....
..#....
..#....
..#....
..#....
..#....
..#....
..###..
.......
\]
..###..
....#..
....#..
....#..
....#..
....#..
....#..
....#..
....#..
..###..
.......
(
....#..
...#...
...#...
..#....
..#....
..#....
..#....
..#....
...#...
...#...
....#..
)
..#....
...#...
...#...
....#..
....#..
....#..
....#..
....#..
...#...
...#...
..#....
<
.......
.......
.......
....##.
..##...
##.....
..##...
....##.
.......
.......
.......
>
.......
.......
.......
.##....
...##..
.....##
...##..
.##....
.......
.......
.......
$
.......
...#...
..####.
.#.#...
.#.#...
..###..
...#.#.
...#.#.
.####..
...#...
.......
*
.......
.......
.......
...#...
.#.#.#.
..###..
.#.#.#.
...#...
.......
.......
.......
-
.......
.......
.......
.......
.......
.#####.
.......
.......
.......
.......
.......
+
.......
.......
.......
...#...
...#...
.#####.
...#...
...#...
.......
.......
.......
=
.......
.......
.......
.......
.######
.......
.######
.......
.......
.......
.......
/
.....#.
.....#.
....#..
....#..
...#...
...#...
..#....
..#....
.#.....
.#.....
.......
#
.......
...#.#.
...#.#.
.######
..#.#..
..#.#..
######.
.#.#...
.#.#...
.......
.......
_
.......
.......
.......
.......
.......
.......
.......
.......
.......
#######
.......
%
.......
.......
.#....#
#.#..#.
#.#.#..
.#.#.#.
..#.#.#
.#..#.#
#....#.
.......
.......
^
.......
...#...
...#...
..#.#..
..#.#..
.#...#.
.#...#.
.......
.......
.......
.......
@
.......
..###..
.#...#.
#..##.#
#.#.#.#
#.#.#.#
#..###.
.#.....
..####.
.......
.......
\\
.#.....
.#.....
..#....
..#....
...#...
...#...
....#..
....#..
.....#.
.....#.
.......
&
.......
..##...
.#..#..
.#..#..
..##..#
.#..#.#
.#...#.
.#...#.
..###.#
.......
.......
|
.......
...#...
...#...
...#...
...#...
...#...
...#...
...#...
...#...
...#...
...#...
~
.......
.......
.......
.......
.......
.###..#
#..###.
.......
.......
.......
.......
?
.......
..###..
.#...#.
.....#.
....#..
...#...
...#...
.......
...#...
.......
.......
'
.......
...#...
...#...
...#...
.......
.......
.......
.......
.......
.......
.......
"
.......
..#.#..
..#.#..
..#.#..
.......
.......
.......
.......
.......
.......
.......
!
.......
...#...
...#...
...#...
...#...
...#...
...#...
.......
...#...
.......
.......
,
.......
.......
.......
.......
.......
.......
.......
..#....
..#....
..#....
.#.....
.
.......
.......
.......
.......
.......
.......
.......
..#....
..#....
.......
.......
;
.......
.......
.......
..#....
..#....
.......
.......
..#....
..#....
..#....
.#.....
:
.......
.......
.......
..#....
..#....
.......
.......
..#....
..#....
.......
.......
];

sub create-new-region(@spans is rw, Zf::Object $object,
                      $x, $y, $width, $height) {
    my $new-region = { from => $x, to => $x + $width,
                       object => $object,
                       ox   => $x, oy => $y };
    for $y..^($y+$height) {
        my @new-span;
        my $inserted = False;
        for @(@spans[$_]) -> Hash $sp {
            # The new region...
            if $x > $sp<from> && $x + $width < $sp<to> { # ...cuts in two
                @new-span.push(
                    { from => $sp<from>,   to => $x,
                      object => $sp<object>,
                      ox   => $sp<ox>,     oy => $sp<oy> },
                    $new-region,
                    { from => $x + $width, to => $sp<to>,
                      object => $sp<object>,
                      ox   => $sp<ox>,     oy => $sp<oy> }
                );
                $inserted = True;
            }
            elsif $x == $sp<from> && $x + $width < $sp<to> {
                @new-span.push(
                    $new-region,
                    { from => $x + $width, to => $sp<to>,
                      object => $sp<object>,
                      ox   => $sp<ox>,     oy => $sp<oy> }
                );
                $inserted = True;
            }
            elsif $x == $sp<from> && $x + $width == $sp<to> { # ...overlaps
                if !$inserted {
                    @new-span.push( $new-region );
                    $inserted = True;
                }
            }
            elsif $x + $width <= $sp<from> { # ...is to the left
                @new-span.push( $sp );
            }
            elsif $x >= $sp<to> { # ...is to the right
                @new-span.push( $sp );
            }
            else { # There are a few other cases too: total or partial overlap
                say "We don't handle that scenario yet";
                say 'x: ', $x, ' x+width: ', $x + $width;
                say 'sp<from>: ', $sp<from>, ' sp<to>: ', $sp<to>;
                die '';
            }
        }
        if !$inserted {
            @new-span.push( $new-region );
        }
        @spans[$_] = @new-span;
    }
}

multi height-of(Zf::Object $object) {
    die "Don't know how to take the height-of a ", $object.WHAT;
}

multi width-of(Zf::Object $object) {
    die "Don't know how to take the width-of a ", $object.WHAT;
}

multi pixel-value-of(Zf::Object $object, $, $) {
    die "Don't know how to take the pixel-value-of a ", $object.WHAT;
}

multi allocate-region(Zf::Object $object, @spans is rw, $rx?, $ry?) {
    create-new-region(@spans, $object,
                      0 + $rx, 0 + $ry,
                      width-of($object), height-of($object));
}

my $IMAGE_PADDING = 2;

multi height-of(Zf::Image $image) {
    height-of($image.child) + 2 * $IMAGE_PADDING
}

multi width-of(Zf::Image $image) {
    width-of($image.child) + 2 * $IMAGE_PADDING
}

multi pixel-value-of(Zf::Image $image, Int $x, Int $y) {
    '.'
}

multi allocate-region(Zf::Image $image, @spans is rw, $rx = 0, $ry = 0) {
    create-new-region(@spans, $image,
                      0 + $rx, 0 + $ry,
                      width-of($image), height-of($image));
    allocate-region($image.child, @spans,
                    $rx + $IMAGE_PADDING, $ry + $IMAGE_PADDING);
}

multi height-of(Zf::Text $text) {
    11
}

multi width-of(Zf::Text $text) {
    7 * $text.string.chars
}

multi pixel-value-of(Zf::Text $text, Int $x, Int $y) {
    return '-' if $y >= $CHAR_HEIGHT;
    my $pos = $x / $CHAR_WIDTH;
    return '-' if $pos >= $text.string.chars;
    my $char = $text.string.substr($pos, 1);
    return '.' if $char eq ' ';
    die "Don't know how to render '$char'"
        unless %font.exists($char);
    my $cx = $x % $CHAR_WIDTH;
    return %font{$char}[$y].substr($cx, 1);
}

my $BOX_PADDING = 4;

multi height-of(Zf::Box $box) {
    height-of($box.child) + 2 * $BOX_PADDING
}

multi width-of(Zf::Box $box) {
    width-of($box.child) + 2 * $BOX_PADDING
}

multi pixel-value-of(Zf::Box $box, Int $x, Int $y) {
    my $bx = [min] $x, width-of($box) - $x - 1;
    my $by = [min] $y, height-of($box) - $y - 1;
    if $bx < $BOX_PADDING && $by < $BOX_PADDING {
        return '#' if $by == 1 && $bx > 1;
        return '#' if $bx == 1 && $by > 1;
        return '.';
    }
    return '#' if $bx == 0;
    return '#' if $by == 0;
    return '.';
}

multi allocate-region(Zf::Box $box, @spans is rw, $rx = 0, $ry = 0) {
    create-new-region(@spans, $box,
                      0 + $rx, 0 + $ry,
                      width-of($box), height-of($box));
    allocate-region($box.child, @spans, $rx + $BOX_PADDING, $ry + $BOX_PADDING);
}

my $ARROW_MIN_HEIGHT = 7;

multi height-of(Zf::Arrow $arrow) {
    $ARROW_MIN_HEIGHT
        + ($arrow.above ?? height-of($arrow.above) !! 0)
        + ($arrow.below ?? height-of($arrow.below) !! 0);
}

my $ARROW_MIN_WIDTH = 10;
my $ARROW_EXTRA_WIDTH = 10;

multi width-of(Zf::Arrow $arrow) {
    ([max]
        $ARROW_MIN_WIDTH,
        ($arrow.above ?? width-of($arrow.above) !! 0),
        ($arrow.below ?? width-of($arrow.below) !! 0)
    ) + $ARROW_EXTRA_WIDTH;
}

multi pixel-value-of(Zf::Arrow $arrow, Int $x, Int $y) {
    my $hh1 = ($ARROW_MIN_HEIGHT / 2).Int;
    return '#' if $y == $hh1;
    my $d = abs($y - $hh1);
    my $w = width-of($arrow);
    return '#' if $w - $hh1 - 1 <= $x < $w - $d;
    return '.'
}

multi allocate-region(Zf::Arrow $arrow, @spans is rw, $rx = 0, $ry = 0) {
    my $y = $arrow.above ?? height-of($arrow.above) !! 0;
    my $height = height-of($arrow);
    if $arrow.above {
        $height -= height-of($arrow.above);
    }
    if $arrow.below {
        $height -= height-of($arrow.below);
    }
    create-new-region(@spans, $arrow,
                      0 + $rx, $y + $ry, width-of($arrow), $height);
    my $ww = width-of($arrow);
    if $arrow.above {
        my $w  = width-of($arrow.above);
        my $dx = (($ww - $w)/2).floor;
        allocate-region($arrow.above, @spans, $rx + $dx, $ry);
    }
    if $arrow.below {
        my $w  = width-of($arrow.below);
        my $dx = (($ww - $w)/2).floor;
        my $dy = height-of($arrow) - height-of($arrow.below);
        allocate-region($arrow.below, @spans, $rx + $dx, $ry + $dy);
    }
}

multi height-of(Zf::Row $row) {
    [max] map { height-of($_) }, @($row.children);
}

multi width-of(Zf::Row $row) {
    [+] map { width-of($_) }, @($row.children);
}

multi allocate-region(Zf::Row $row, @spans is rw, $rx = 0, $ry = 0) {
    my $hh = height-of($row);
    my $dx = 0;
    for @($row.children) -> $child {
        my $dy = (($hh - height-of($child)) / 2).floor;
        allocate-region($child, @spans, $rx + $dx, $ry + $dy);
        $dx += width-of($child);
    }
}

method render() {
    my @spans = map { [] }, ^height-of($!image);
    allocate-region($!image, @spans);
    for @spans.kv -> $y, $span {
        for $span.list -> Hash $h {
            my $object = $h<object>;
            for $h<from>..^$h<to> -> $x {
                print pixel-value-of($object, $x - $h<ox>, $y - $h<oy>);
            }
        }
        print "\n";
    }
}
