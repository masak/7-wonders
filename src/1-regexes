=for history
The Great Pyramid of Giza (also called the Pyramid of Khufu and the Pyramid of
Cheops) is the oldest and largest of the three pyramids in the Giza Necropolis
bordering what is now El Giza, Egypt, and in a historical irony is the oldest
of the Seven Wonders of the Ancient World and the only one that survives
substantially intact. [...] The Great Pyramid was the tallest man-made
structure in the world for over 3,800 years. Originally the Great Pyramid was
covered by casing stones that formed a smooth outer surface, but what is seen
today is mainly only the underlying core structure, with a few of the original
casing stones that once covered the structure simply representing the four
compass points around the base. There have been varying scientific and
alternative theories regarding the Great Pyramid's construction techniques.
Most accepted construction theories are based on the idea that it was built by
moving huge stones from a quarry and dragging and lifting them into place.

=head0 Regexes

=head1 DSLs

What people mean by the term DSL ("Domain-Specific Language") varies widely,
and I don't claim to have a better subjective definition than others... but to
me, the following makes a lot more sense than "a DSL comprises a set of
appropriately-named subroutines and method names":

C<We define a DSL as a restricted syntax and semantics for solving a specific
class of tasks more conveniently than a general-purpose language would.>

Perl has a history of successfully mixing DSLs into its main dialect. We
hardly notice ourselves slipping into and out of them: transliteration, file
globs, POD, various quoting environments (including here-docs, C<qw> lists and
shell quotes)... Rather than staying isolated from the surrounding program,
they often weave into it, both accepting values from the larger program and
passing them back out. We get many languages for the price of one. We get
socially encouraged multilingualism. We get a TIMTOWTDI toolbox of solutions,
each precesely honed for a purpose.

(Perl 5 tries valiantly to Do What You Mean with respect to these nested
languages, only occasionally getting it wrong (pro tip: don't put a slash into
the comment of a C</x> regex delimited by slashes). Perl 6 formalizes the
notion, and defines the DSLs as being I<slangs>, short for "sublanguages",
which weave together into a I<braid> to make up your standard Perl 6. This may
sound really spaced out, but in practice it means that Perl 6 won't have to
have a section in its C<perldoc> called "Gory details of parsing quoted
constructs". There will still be gory details, for sure, but Perl 6 strives to
spread out the gore more evenly, and reserve the traps and pitfalls for really
intrepid people.)

=head1 Enter... the regex

I've yet to mention the most-used and most-famous DSL of Perl: the regex
language. It makes for a very natural way to talk about strings, parts of
strings, and ways in which one might like to modify strings.

  if $kitchen ~~ /rat/ {
      say "Oh dear. I have a rat in my kitchen!";
  }

Now, picture for a moment a world without regexes. We could still solve the
above problem, but we'd have to make use to primitive string operations
instead:

  # RAKUDO: Since Rakudo's Str.index method returns Int values rather than
  #         the intended StrPos values, the 'defined' prevents false negatives
  #         in the form of substring matches at position 0. In a more
  #         conformant Perl 6 implementation, we wouldn't need it.
  if defined $kitchen.index('rat') {
    say "Oh dear. I have a rat in my kitchen!";
  }

Arguably, the optimizer should do such a substitution under the hood. In this
particular case, we don't use the regex engine enough for it to feel
indispensible to us.

But wait! We notice, to our dismay, that we can't pull out the C<cheese
gB<rat>er> from the cupboards without the above conditions triggering.
Honestly, we didn't really have such false positives in mind when we crafted
our regex. We actually meant something like this:

  if $kitchen ~~ / << rat >> / {
      say "I have a rat in my kitchen!";
  }

(The C<<< << >>> and C<<< >> >>> indicate word boundaries, in case you wonder.
Oh, and in Perl 6 regexes, which I'll use throughout the series, ordinary
whitespace carries no significance. Think C</x> flag Ã  la Perl 5, but without
the C</x> flag.)

Right... what primitive operations would correspond to the above regex?
Let's see...

  sub non-word($char) { $char ne any('a'..'z', 'A'..'Z', 0..9, '_') }
  my $matched = False;
  # You might not have seen the ^$foo style of ranges before. It's short for
  # 0 ..^ $foo, which in this case means 0 .. $foo-1. A nice way of looping
  # up to (but not including) $foo.
  for ^($kitchen.chars - 'rat'.chars + 1) -> $pos {
      # Check word boundary to the left
      next unless $pos == 0 || non-word($kitchen.substr($pos - 1, 1));
      # Check whether the substring equals 'rat'
      next unless $kitchen.substr($pos, 'rat'.chars) eq 'rat';
      # Check word boundary to the right
      next unless $pos == $kitchen.chars - $rat.chars
                            || non-word($kitchen.substr($pos + 'rat'.chars, 1));
      $matched = True;
      last;
  }
  if $matched {
    say "I have a rat in my kitchen!";
  }

I mostly give this example to show exactly what I mean by 'solving a specific
class of tasks more conveniently than a general-purpose language would'. Look
how much poorer the world becomes when we don't let ourselves use regexes!
Steve Yegge tells about job interviews he's sat in on where people concoct
elaborate loops like the one above, essentially going on for hundreds of lines,
when one or a couple of well-placed regexes would've sufficed.

(The subroutine C<&non-word> misses the mark slightly by not considering
Unicode alphanumerics, as Perl 6 regexes do by default. I leave adapting it to
Unicode as a cruel exercise to any reader who still doesn't agree that regexes
can help keep code brief.)

=head1 A compiler for regexes

The Parrot Grammar Engine (PGE), the piece of software I will describe in this
series, takes a regex and compiles it down to the kind of primitive operations
seen above. The output language is PIR, a sugared-up assembly language for the
Parrot virtual machine. But it might as well have been Perl 6 or some
machine-specific assembly language; the point is that PGE satisfies the
definition of a I<compiler>: something that takes as input a program in one
language, and emits the same program in another language. Regexes qualify as
programs; quite specialized, DSL-y ones, but still programs.

Many of the constructs that we recognize from imperative programming, we also
find represented in regexes. We have if statements, through the C<?>
quantifier; we have loops through the C<*> and C<+> and C<**>
quantifiers. Variables and assignments figure in regexes; Perl 6 even
introduces sub and method calls with its C<< <other-regex> >> syntax. But
one major difference sets regexes apart from ordinary imperative programming,
and from all the I<other> DSLs in Perl: regexes give up. All the time.

Notice the three occurrences of C<next unless> in the above code? Those are
short for saying "if what we find here doesn't live up to the pattern against
which we're trying to match, give up immediately and start from the beginning
somewhere else". This happens every time we want to match a piece of a regex
against a piece of a string; in the general case, there's no sense in
continuing when something fails to match.

Perl already has an idiom for this. We're used to seeing actions chained
together with C<&&>:

  try_foo() && try_bar() && try_something_awesome();

In code such as the above, the C<&&> operators can be read as "and if that
succeeds, then...". Conversely, if an earlier action fails, we don't proceed
to later actions.

Regexes give up all the time. The I<syntax> of regexes takes this realization,
and hides it away in the little cracks between terms, in the gaps between
stuff. The giving-up becomes abstracted away; the syntax implies it, but makes
it conveniently invisible. Which forms one reason why regexes make a good fit
for matching strings: we don't have to keep saying "if I<that> failed, might as
well give up now". The syntax folds it into itself.

Just describing regexes as "giving up all the time" is slightly unfair,
though. In part 3 of this series we'll start to suspect that the truth, as is
often the case, weaves a thicker and richer tapestry. Before giving up, regexes
perform a desperate but beautiful dance called "backtracking"... but more about
that later.

I'll be introducing the full arsenal of regular expression components
gradually through the series. This time around we've already seen I<literals>
(string values which represent themselves) and I<anchors> (zero-length
assertions about the current position in the target string). I don't plan to
regurgitate all of S05, but here follows a short summary of these two
components.

A literal either consists of alphanumerics (such as C<rat> or C<C3P0> or
C<underscores_are_alphanumerics_srsly>), or, if they do not, you should
consider quoting them using single quotes (such as C<'o.O'> or C<'OH HAI!'> or
C<'.*'>). As an equivalent alternative to quoting, you may prefix your
non-alphanumerics with a backslash (making C<o\.O>, C<OH\ HAI\!> and C<\.\*>,
respecitvely, equivalent to the previous set of quoted literals).

The general rule is that alphanumerics are literal by default, whereas
non-alphanumerics are magical (actually, the professional term is
'metasyntactical'... which means 'magical'). Prefixing with a backslash turns
literal things into magical things, and vice versa. Not all magical things have
a default meaning. (C<\w> does, but C<\_> doesn't, for example.)

We've already seen the anchors C<<< << >>> for "left word boundary" and C<<< >>
>>> for "right word boundary". Here follows a complete list of the types of
anchor in Perl 6 regexes:

  ^           start of string
  $           end of string
  ^^          start of line
  $$          end of line
  \b   <?wb>  word boundary (but see note 1)
  <<          left word boundary
  Â«           left word boundary
  >>          right word boundary
  Â»           right word boundary
       <?ww>  between two word characters
       <?>    always true
       <!>    always false

(Note 1: During the production of this series of blog posts, I discovered that
Synopsis 5 doesn't actually spec C<\b> as meaning "word boundary". PGE,
however, implements it.)
